head	1.12;
access;
symbols
	beforeConnectedTry:1.7
	branchAndBound:1.7
	dockingToPanelNow:1.6;
locks; strict;
comment	@ * @;


1.12
date	99.01.30.01.13.13;	author kiecza;	state Exp;
branches;
next	1.11;

1.11
date	99.01.02.08.14.17;	author kiecza;	state Exp;
branches;
next	1.10;

1.10
date	98.06.02.10.33.07;	author daniel;	state Exp;
branches;
next	1.9;

1.9
date	98.05.05.11.16.47;	author daniel;	state Exp;
branches;
next	1.8;

1.8
date	98.05.01.21.13.13;	author daniel;	state Exp;
branches;
next	1.7;

1.7
date	98.04.29.22.16.13;	author daniel;	state Exp;
branches;
next	1.6;

1.6
date	98.04.29.02.12.56;	author daniel;	state Exp;
branches;
next	1.5;

1.5
date	98.04.28.11.19.43;	author daniel;	state Exp;
branches;
next	1.4;

1.4
date	98.04.28.00.00.27;	author daniel;	state Exp;
branches;
next	1.3;

1.3
date	98.04.27.20.01.59;	author daniel;	state Exp;
branches;
next	1.2;

1.2
date	98.04.27.00.28.06;	author daniel;	state Exp;
branches;
next	1.1;

1.1
date	98.04.26.15.57.10;	author daniel;	state Exp;
branches;
next	;


desc
@@


1.12
log
@introduced several new special commands that allow for simple tree structured grammars.
The tag @@ forces commands to be executed in detect_mode_off-state
@
text
@/*********************************************************************************
 *
 * $Id: speakermodel.h,v 1.11 1999/01/02 08:14:17 kiecza Exp kiecza $
 *
 *********************************************************************************/

#ifndef SPEAKERMODEL_H
#define SPEAKERMODEL_H

#include <qwidget.h>
#include <qstring.h>
#include <qfile.h>
#include <qlist.h>
#include <kconfig.h>
#include <qtimer.h>

#include <kapp.h>

class QFileDialog;
class QListBox;
class QPushButton;

class ReferenceEditor;
class Preprocessing;
class SoundBuffer;
class Score;
class Options;

#include "reference.h"


class SpeakerModel : public QWidget
{
  Q_OBJECT

public:

  SpeakerModel(KConfig *config, QWidget *parent=0, const char *name=0);
  ~SpeakerModel();

  bool has_changed();
  bool ask_save_changes();
  bool check_references();

  void save_config(KConfig *);

  void load(char *f=0, bool reset_first=true);

public slots:

  bool reset();
  void load();
  void import();
  void save();
  void save_as();
  
  void test_utterance();

  void new_reference();
  void edit_reference();
  void delete_reference();

  void append_reference(Reference *);

  void detect_mode_on();
  void detect_mode_off();
  void toggle_detect_mode();

  void show_options();

  void train_references();

  void calibrate_micro();
  
  //void set_min_distance(float val) {min_distance = val;};

signals:
  
  void new_title(QString title);
  void detect_mode_changed(bool detect);

private:

  QString test_command(QString command, QString cname);
  void    execute_command(QString command);
  int     end;

  QString          *filename;
  QFileDialog      *fdialog;

  QListBox         *ref_listbox;
  QList<Reference> *ref_list;

  ReferenceEditor  *ref_editor;

  Score            *score;
  Preprocessing    *preprocessing;
  SoundBuffer      *buffer;

  bool             do_detect;
  bool             changed;

  Options          *options_dlg;

  QTimer           *led_timer;

  QPushButton *new_reference_btn;
  QPushButton *edit_reference_btn;
  QPushButton *delete_reference_btn;
};

#endif

@


1.11
log
@removed RCS log history from file header
@
text
@d3 1
a3 1
 * $Id: speakermodel.h,v 1.10 1998/06/02 10:33:07 daniel Exp kiecza $
d83 4
@


1.10
log
@microphone calibration added
@
text
@d3 1
a3 37
 * $Id: speakermodel.h,v 1.9 1998/05/05 11:16:47 daniel Exp daniel $
 *
 * $Log: speakermodel.h,v $
 * Revision 1.9  1998/05/05 11:16:47  daniel
 * <import speakerfile> added
 *
 * Revision 1.8  1998/05/01 21:13:13  daniel
 * TrainDialog introduced (for training commands extracted from a file)
 *
 * Revision 1.7  1998/04/29 22:16:13  daniel
 * min_distance moved to score now (all scoring is done within score now, as it should be done)
 *
 * Revision 1.6  1998/04/29 02:12:56  daniel
 * tiny_mode removed -> now using docking to panel!!!
 * LED lamps removed (moved onto docking_widget infact)
 * #include's moved to speakermodel.cpp as far as possible ->
 *   in speakermodel.h just keep class definitions (e.g. class SoundBuffer;)
 *
 * Revision 1.5  1998/04/28 11:19:43  daniel
 * score_threshold moved to class Score now -> online rejection!
 *
 * Revision 1.4  1998/04/28 00:00:27  daniel
 * LED timer introduced and kapp.h included to enforce event handling during
 * scoring process (Xflush etc.)
 *
 * Revision 1.3  1998/04/27 20:01:59  daniel
 * led_record and led_recognition added
 * led_recognition not yet working correctly!
 * tiny mode added (can be used during recognition mode; just displays the two LEDs)
 *
 * Revision 1.2  1998/04/27 00:28:06  daniel
 * save_config introduced
 * options dialog implemented
 *
 * Revision 1.1  1998/04/26 15:57:10  daniel
 * Initial revision
 *
@


1.9
log
@<import speakerfile> added
@
text
@d3 1
a3 1
 * $Id: speakermodel.h,v 1.8 1998/05/01 21:13:13 daniel Exp daniel $
d6 3
d108 2
@


1.8
log
@TrainDialog introduced (for training commands extracted from a file)
@
text
@d3 1
a3 1
 * $Id: speakermodel.h,v 1.7 1998/04/29 22:16:13 daniel Exp daniel $
d6 3
d80 1
a80 1
  void load(char *f=0);
d86 1
@


1.7
log
@min_distance moved to score now (all scoring is done within score now, as it should be done)
@
text
@d3 1
a3 1
 * $Id: speakermodel.h,v 1.6 1998/04/29 02:12:56 daniel Exp daniel $
d6 3
d77 2
d92 2
d99 2
@


1.6
log
@tiny_mode removed -> now using docking to panel!!!
LED lamps removed (moved onto docking_widget infact)
#include's moved to speakermodel.cpp as far as possible ->
  in speakermodel.h just keep class definitions (e.g. class SoundBuffer;)
@
text
@d3 1
a3 1
 * $Id: speakermodel.h,v 1.5 1998/04/28 11:19:43 daniel Exp daniel $
d6 6
d93 1
a93 1
  void set_min_distance(float val) {min_distance = val;};
a115 2

  float            min_distance;
@


1.5
log
@score_threshold moved to class Score now -> online rejection!
@
text
@d3 1
a3 1
 * $Id: speakermodel.h,v 1.4 1998/04/28 00:00:27 daniel Exp daniel $
d6 3
a34 1
#include <kledlamp.h>
d42 7
d51 1
a51 5
#include "reference_editor.h"
#include "preprocessing.h"
#include "buffer.h"
#include "score.h"
#include "options.h"
a65 2
  void tiny_mode(bool);

a114 2
  KLedLamp         *led_record;
  KLedLamp         *led_recognition;
d116 1
a116 1
  
@


1.4
log
@LED timer introduced and kapp.h included to enforce event handling during
scoring process (Xflush etc.)
@
text
@d3 1
a3 1
 * $Id: speakermodel.h,v 1.3 1998/04/27 20:01:59 daniel Exp daniel $
d6 4
a81 2
  //void toggle_recognition();

a83 1
  void set_threshold(float val) {score_threshold = val;};
a107 1
  float            score_threshold;
@


1.3
log
@led_record and led_recognition added
led_recognition not yet working correctly!
tiny mode added (can be used during recognition mode; just displays the two LEDs)
@
text
@d3 1
a3 1
 * $Id: speakermodel.h,v 1.2 1998/04/27 00:28:06 daniel Exp daniel $
d6 5
d30 3
d63 1
a63 1
  void reset();
d68 1
a68 1
  bool test_utterance();
d78 1
a78 1
  void toggle_recognition();
d86 1
a86 2

  void recognizing();
d114 2
a115 1

d122 1
@


1.2
log
@save_config introduced
options dialog implemented
@
text
@d3 1
a3 1
 * $Id: speakermodel.h,v 1.1 1998/04/26 15:57:10 daniel Exp daniel $
d6 4
d23 1
a23 1

d49 2
d70 2
d79 1
d104 7
@


1.1
log
@Initial revision
@
text
@d3 5
a7 1
 * $Id: $
a8 1
 * $Log: $
d20 2
a23 1
//class Utterance;
d30 1
d38 1
a38 1
  SpeakerModel(QWidget *parent=0, const char *name=0);
d45 2
d64 5
d93 2
@
